____________________AsmFun__Documentation_______________________

			AsmFun module

AsmFun is the assembler functions for more convinient coding in nasm

Here's the list of all functions and their purpose for your coding pleasure:

1. _add0

	Purpose:
		This function adds 0 code in ASCII [NULL] to the string pointer.
		You will need to do this for _print cause it counts the
		string to that character.	

	Input: 
		- rdi as a pointer to memory

	Output:
		- String in rdi pointer is modified

		- al is modified

	Dependency: 
		If you want to use this function you have to put this line 
		of code into the end of your nasm code:
			%include "<Your_path_to_AsmFun>/Add0/main.asm"

2. _addMinus

	Purpose:
		This function adds "-" character (45 in ASCII) to the string pointer.

	Input:
		- rdi as a pointer to memory

	Output:
		- string being pointed by is modified
		
		- rdi is incremented
		
		- bl equals to 45

	Dependency:
		Put this line of code into your nasm code:
			%include "<Your_path_to_AsmFun>/AddMinus/main.asm"

3. _addNewLineCharacter

	Purpose:
		This function add "\n" character (10 in ASCII) to the string pointer.

	Input:
		- rdi as a pointer to memory

	Output:
		- string being pointed by rdi is modified
		
		- bl equals to 10
		
		- rdi is incremented

	Dependency:
		Put this line of code into your nasm code:
			%include "<Your_path_to_AsmFun>/AddNewLineCharacter/main.asm"

4. _assignFlippedIntegerPortion

	Purpose:
		Gets a string that is the flipped integer portion of a number in rax.
		Serves for the function _intToString. It also can be used for 
		number systems converstion if you want it to. 
	
	Input:
		- rax as an integer
	
		- rdi as a pointer to string
	
		- rbx is a devider (for decimal it must be 10)

	Output:
       	- rdx is modified
	
		- rdi points to the end of the destination string
	
		- rax equals to 0

		- string being pointed by rdi is modified

		- rbx remains the same

	Dependency:
       		Put this line of code into your nasm code:
               	%include "<Your_path_to_AsmFun>/AssignFlippedIntegerPortion/main.asm"

5. _break

	Purpose:
		Returns from the subroutine (your function)

	Input:
		Offset in the code sector (call saves it in stack automatically)

	Output:
		Returns from function

	Dependency:
		Put this line of code into your nasm code:
			%include "<Your_path_to_AsmFun>/Break/main.asm"

6. _flipString

	Purpose:
		This function takes the content of a string,
		flips it and puts it into the string pointer.

	Input:
		- rsi as a pointer to the source string
		
		- rdi as a pointer to the destination string 

	Output:
		- rsi remains the same

		- rdi points to the end of the destination string

		- r8 equals to rsi

		- rax is modified

		- source string remains
		the same

		- destination string is a 
		flipped source string

	Dependencies:
		These lines of code are going to require those lines
		in your nasm code:
			%include "<Your_path_to_AsmFun>/FlipTemp/main.asm" - this you have to put right in
		the end of your code
			%include "<Your_path_to_AsmFun>/TempRes/main.asm" - this you're gonna wanna
		put in the beginning of your nasm code


7. _floatToString _____________TODO___________

	Purpose:
		Converts floating point number into string and puts it to string pointer
	
	Input:
	
	OutPut:

	Dependency:
	
		  _____________TODO____________

8. _getDebugString

	Purpose:
		Generates string that contains info about all registers (their values I mean)

	Input:
		You just leave registers as they are

	Output:
		Debug string is going to be printed on the screen. All of your registers
		are safe!

	Dependencies:
		Resourses (that means you have to pass these lines right in the beginning of
		your code):

			%include "<Your_path_to_AsmFun>/GetDebugStringRes/main.asm"
			%include "<Your_path_to_AsmFun>/TempRes/main.asm"

		Code (that means you gonna wanna put these lines in the end of your script):
			
			%include "<Your_path_to_AsmFun>/Memclrb/main.asm"
			%include "<Your_path_to_AsmFun>/GetDebugString/main.asm"
			%include "<Your_path_to_AsmFun>/PrintSafe/main.asm"	
			%include "<Your_path_to_AsmFun>/FlipString/main.asm"
			%include "<Your_path_to_AsmFun>/MinusCheck/main.asm"
			%include "<Your_path_to_AsmFun>/AssignFlippedIntegerPortion/main.asm"
			%include "<Your_path_to_AsmFun>/AddMinus/main.asm"
			%include "<Your_path_to_AsmFun>/IntToString/main.asm"

9. _getFloatingPortion _____________TODO___________

	Purpose:
		Puts floating portion of the number into string pointer
	Input:

	OutPut:

	Dependency:
	       _____________TODO____________

10. _memcpyq
        Purpose:
			Loads memory from the source to the destination

        Input:
			- rsi is a pointer to source

			- rdi is a pointer to the destination

			- rcx is amount of quadwords to copy

        Output:
			- rax is modified

			- rsi points to the rsi + rcx

			- rdi points to the rdi + rcx

        Dependencies:
                Code:
					%include "<Your_path_to_AsmFun>/Memcpyq/main.asm"

11. _input
	Purpose:
		Puts the user's input into pointer to a string

	Input:
		- rsi as a pointer to memory

		- rdx as a maximum amount of characters in a string

	Output:
		- String being pointed by rsi is modified

		- rax equals to the length of a string with \0 character

		- rcx is modified

		- rdx remains the same

		- rsi is modified
	
		- r11 is modified

	Dependency:
	
		Code:
			%include "<Your_path_to_AsmFun>/Input/main.asm"	

12. _intToString
	Purpose:
		Converts integer value into string and puts it to a pointer to a string

	Input:
		- rax as an integer
	
		- rdi as a pointer to destination string

		- rcx as the number base

	Output:	
		- rax is modified
		
		- rbx is modified

		- rcx is modified
		
		- rdx is modified

		- rsi is modified

		- rdi is modified

	Dependencies:
		Resourses:
			%include "<Your_path_to_AsmFun>/TempRes/main.asm"

		Code:
			%include "<Your_path_to_AsmFun>/MinusCheck/main.asm"
			%include "<Your_path_to_AsmFun>/AssignFlippedIntegerPortion/main.asm"
			%include "<Your_path_to_AsmFun>/FlipString/main.asm"
			%include "<Your_path_to_AsmFun>/IntToString/main.asm"
			%include "<Your_path_to_AsmFun>/AddMinus/main.asm"
			%include "<Your_path_to_AsmFun>/Memclrb/main.asm"

13. _minusCheck
	Purpose:
		Defines whether integer is positive or negative and puts "-" character
		into string pointer if necessary
	
	Input:
		- rax as an integer

		- rdi as a pointer to the destination string
	
	Output:	
		- bl equals to 45 if rax is negative else remains the same

		- string is modified if rax is negative
`
		- rdi is incremented if "-" was written to a string
	
	Dependencies:	
		Code:
			%include "<Your_path_to_AsmFun>/MinusCheck/main.asm"
			%include "<Your_path_to_AsmFun>/AddMinus/main.asm"

14. _print
	Purpose:
		Print a text string to the screen

	Input:
		- rsi as a pointer to a source string

	Output:
		- rax equals to the length of a string

		- rcx is modified 
	
		- rdx equals to the length of a string
	
		- rsi is modified

		- rdi equals to 1
	
		- r11 is modified

	Dependency:	
		Code:
			%include "<Your_path_to_AsmFun>/Print/main.asm"

15. _printSafe
        Purpose:
			Print a text string with saving all registers
        
	Input:
		- rsi as a pointer to string        
       
	Output: 
		- everything remains the same but string is printer
        
	Dependency:      
		Code:
			%include "<Your_path_to_AsmFun>/PrintSafe/main.asm"

16. _exit
	Purpose:
		Quits from a program. In C the equivalent is "return 0;"
		meaning the program ended normally
	
	Input:
		- nothing
	
	Output:
		- nothing but program is terminated
	
	Dependency:
		Code:
			%include "<Your_path_to_AsmFun>/StandardExit/main.asm"

17. _strCapitalize
	Purpose:
                Changes all the letters in a string to uppercase
        
	Input:
                - rsi as a pointer to a string
        
	Output: 
		- al is modified

		- rsi points to the end of the string

		- string is modified if there is at least a one letter
        
	Dependencies:      
		Code:	
			%include "<Your_path_to_AsmFun>/StrCapitalize/main.asm"
			%include "<Your_path_to_AsmFun>/Break/main.asm"

18. _strLowercase
        Purpose:
			Changes all characters in the string to lowercase
        
		Input:
			- rsi as a pointer to a string
			
		Output:
			- al is modified

			- rsi points to the end of the string

			- string is modified if there is at least one letter
			
		Dependencies:
			Code:
				%include "<Your_path_to_AsmFun>/StrLowercase/main.asm"
				%include "<Your_path_to_AsmFun>/Break/main.asm"

19. _power
		Purpose:
			Raises integer to the power 

		Input:
			- rax as an integer

			- rcx as an integer exponential

		Output:
			- rbx equals to rax before function start

			- rax is raised to the power of rcx

			- rcx equals to 0

		Dependency:
			Code:
				%include "<Your_path_to_AsmFun>/Power/main.asm"

20. _stringToInt
		Purpose:
			Takes integer from string and puts it into register
			
		Input:
			- rsi as a pointer to string
			
		Output:

			- rax is a number being recieved from a string

			- rbx is modified

			- ch equals to 1 if a number is negative else 0

			- cl equals to 0

			- r8 equals to 10
		
			- r9 is modified

			- r10b stores the number of digits

			- rdx is modified

			- rsi points to the string

			- rdi points to the place of the
			string where the program has ended
			for some reason (e.g. ".", " ", "\0" etc)
			has ended the execution

        
		Dependency:
			Code:
				%include "<Your_path_to_AsmFun>/StringToInt/main.asm"	
				%include "<Your_path_to_AsmFun>/Break/main.asm"

21. _factorial

		Purpose:
			Calculates the factorial via cycle

		Input:
			- rbx as an integer

		Output:
			- rax equals to factorial of rax

			- rax is -1 if factorial doesn't exist

		Dependencies:
			Code:
				%include "<Your_path_to_AsmFun>/Factorial/main.asm"	
				%include "<Your_path_to_AsmFun>/Break/main.asm"
				%include "<Your_path_to_AsmFun>/Negate/main.asm"

22. _strLen
		Purpose:
			Finds the length of the string except \0 and \n
		
		Input:
			- rsi as a pointer to a string
		
		Output:
			- rcx equals to the length of the string
		
			- al is modified

			- rsi points to the end of the string
		
		Dependencies:
			Code:
				%include "<Your_path_to_AsmFun>/StrLen/main.asm"
				%include "<Your_path_to_AsmFun>/Break/main.asm"

23. _haltMachine
        Purpose:
		Halts machine (this means it stops it)
	
        Input:
			- nothing

        Output:
			- if a system commits this function it stops the computer
			(I used this function in my os, in Linux is doesn't work)
	
        Dependencies:
			Code:
				%include "<Your_path_to_AsmFun>/HaltMachine/main.asm"

24. _memclrb
        Purpose:
			Puts zeros into memory

        Input:
			- rdi as a pointer to memory

			as amount of bytes to clear

        Output:
			- al equals to 0

			- rdi points to the memory + rcx

			- rcx remains the same

        Dependencies:
			Code:
				%include "<Your_path_to_AsmFun>/Memclrb/main.asm"

25. _memcpyb
        Purpose:
			Loads memory from the source to the destination

        Input:
            - rsi is a pointer to source

			- rdi is a pointer to the destination

			- rcx is amount of bytes to copy

        Output:
            - al is modified

			- rsi points to the rsi + rcx

			- rdi points to the rdi + rcx

        Dependencies:
                Code:
                    %include "<Your_path_to_AsmFun>/Memcpyb/main.asm"

26. _memcpyw
        Purpose:
			Loads memory from the source to the destination

        Input:
			- rsi is a pointer to source

			- rdi is a pointer to the destination

			- rcx is amount of words to copy

        Output:
			- rax is modified

			- rsi points to the rsi + rcx

			- rdi points to the rdi + rcx

        Dependencies:
			Code:
				%include "<Your_path_to_AsmFun>/Memcpyd/main.asm"

27. _loadIDT
        Purpose:
			This function is for your operating system development
			pleasure. This loads the idt table into adress 0x7e00
			and sets it up so the cpu can access it

        Input:
			- nothing at all

        Output:
			- rax is modified

			- rbx is 0

			- rcx is 0

			- rsi is modified

			- rdi points to the end of the IDT

        Dependencies:
			Code:
				%include "<Your_path_to_AsmFun>/LoadIDT/main.asm"
				%include "<Your_path_to_AsmFunOs>/src/interrupts/interruptServiceRoutines/IgnoreInterruptHandler/main.asm"
				%include "<Your_path_to_AsmFunOs>/src/interrupts/interruptServiceRoutines/KeyboardInterruptHandler/main.asm"
				%include "<Your_path_to_AsmFunOs>/src/interrupts/resources/IDTInterruptGatePattern/main.asm"

28. _chill
		Purpose:
			Puts a computer in a waiting mode which means it does nothing
			but responds to only interrupts

		Input:
			- nothing

		Output:
			- nothing

		Dependencies:
			Code:
				%include "<Your_path_to_AsmFun>/Chill/main.asm"

29. _memclrw
        Purpose:
                Puts zeros into memory

        Input:
                - rdi as a pointer to memory

                - rcx as amount of words to clear

        Output:
                - ax equals to 0 

                - rdi points to the memory + 2 * rcx

                - rcx remains the same

        Dependencies:
			Code:
				%include "<Your_path_to_AsmFun>/Memclrw/main.asm"

30. _memclrq
        Purpose:
			Puts zeros into memory

        Input:
			- rdi as a pointer to memory

			- rcx as amount of quad words to clear

        Output:
			- rax equals to 0 

			- rdi points to the memory + 8 * rcx

			- rcx remains the same

        Dependencies:
			Code:
				%include "<Your_path_to_AsmFun>/Memclrq/main.asm"

31. _sleep
		Purpose:	
			Waits some amount of time and then returns
		
		Input:
			- rcx as amount of time in milliseconds
		
		Output:
			- rcx equals to 0

		Dependencies:
			Code:
				%include "<Your_path_to_AsmFun>/Sleep/main.asm"

32. _strcmp
		Purpose:
			Compares two strings and returns: 
				1) 0 if they are completely equal

				2) < 0 if ascii code of at least one character
				of the first string is more than the code
				of the respective character of the second string
		
				3) else < 0

		Input:
			- rsi as a pointer to the
			first string
			
			- rdi as a pointer to the 
			second string

		Output:
			- rax is an answer

			- bl is modified

			- rsi points to the end
			of the first string

			- rdi points to the end
			of the second string

		Dependencies:
			Code:
				%include "<Your_path_to_AsmFun>/Strcmp/main.asm"
